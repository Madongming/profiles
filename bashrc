# Matthew Wang's Bash Profile for general Linux/Unix
#
# Suggestion: ln -sf .bashrc .bash_profile
#

# Customized PATH
#
function pathmunge() {
    local x
    for x in "$@"; do
        [[ :$PATH: == *:$x:* ]] || PATH=$x:$PATH
    done
}
pathmunge /bin /usr/bin /sbin /usr/sbin /usr/local/bin /usr/local/sbin \
          /usr/X11/bin ~/bin
unset pathmunge
export PATH

function __git_status_color() {
    git symbolic-ref HEAD >& /dev/null || return 0
    if [[ -n $(git status -s 2>/dev/null) ]]; then
        echo -e "\033[1;31m"        # red status
    else
        echo -e "\033[1;32m"        # green status
    fi
}

function __git_active_branch() {
    local branch=$(git symbolic-ref HEAD 2>/dev/null)
    [[ -z $branch ]] || echo " (${branch##refs/heads/})"
}

# is to mark ansi colors to allow shell to calculate prompt string length
# correctly
#
_LR="\[\e[1;31m\]"      # light red
_LG="\[\e[1;32m\]"      # light green
_LY="\[\e[1;33m\]"      # light yellow
_LB="\[\e[1;34m\]"      # light blue
_LM="\[\e[1;35m\]"      # light magenta
_LC="\[\e[1;36m\]"      # light cyan
_RR="\[\e[7;31m\]"      # reverse red
_NC="\[\e[0m\]"         # no color

# Fancy PS1, prompt current time, exit status of last command, hostname, cwd,
# git status and branch, also prompt the '$' in red when we have background
# jobs, '\[' and '\]' is to mark ansi colors to allow shell to calculate prompt
# string length correctly
#
PS1="${_LC}\t "
PS1="${PS1}\$([[ \$? == 0 ]] && echo '${_LG}✔' || echo '${_LR}✘') "
PS1="${PS1}${_LB}\h"                                # blue hostname
PS1="${PS1} ${_LY}\w"                               # yellow cwd
PS1="${PS1}\[\$(__git_status_color)\]"              # git status indicator
PS1="${PS1}\$(__git_active_branch)"                 # git branch name
PS1="${PS1}${_LM} ⤾${_NC}\n"                        # magenta wrap char, NL
PS1="${PS1}\$([[ -z \$(jobs) ]] || echo '$_RR')"    # reverse bg job indicator
PS1="${PS1}\\\$${_NC} "                             # $
unset _LR _LG _LY _LB _LM _LC _RR _NC

export PS1
export EDITOR=vim
export TERM=linux
export GREP_OPTIONS="--color=auto"

# Locale matters for ls and sort
# www.gnu.org/software/coreutils/faq/#Sort-does-not-sort-in-normal-order_0021
export LC_COLLATE=C
export LC_CTYPE=C

# To start a global ssh-agent: ssh-agent | sed /^echo/d > ~/.ssh-agent.rc
[[ ! -r ~/.ssh-agent.rc ]] || source ~/.ssh-agent.rc

# Shortcuts (Aliases, function, auto completion etc.)
#
case $(uname -s) in
    Linux)
        alias ls='/bin/ls -F --color=auto'
        alias l='/bin/ls -lF --color=auto'
        alias lsps='ps -ef f | grep -vw grep | grep -i'
        ;;
    Darwin)
        alias ls='/bin/ls -F'
        alias l='/bin/ls -lF'
        alias lsps='ps -ax -o user,pid,ppid,stime,tty,time,command | grep -vw grep | grep -i'
        ;;
    *)
        alias ls='/bin/ls -F'
        alias l='/bin/ls -lF'
        alias lsps='ps -auf | grep -vw grep | grep -i'
        ;;
esac

# Find a file which name matches given pattern (ERE)
function f() {
    local pat=${1?'Usage: f ERE-pattern [path...]'}
    shift
    find ${@:-.} \( -path '*/.svn' -o -path '*/.git' -o -path '*/.idea' \) -prune \
        -prune -o -print | grep -i "$pat"
}

# Load file list generated by function f() above in vim, you can type 'gf' to
# jump to the file
#
function vif() {
    local tmpf=$(mktemp)
    f "$@" > $tmpf && vi -c "/$1" $tmpf && rm -f $tmpf
}

# Grep a pattern (ERE) in files that match given file glob in cwd
function g() {
    local string_pat=${1:?"Usage: g ERE-pattern [file-glob] [grep options]"}
    local file_glob=${2:-"*"}
    shift; [[ -z $1 ]] || shift
    find . \( -path '*/.svn' -o -path '*/.git' -o -path '*/.idea' \) -prune \
        -o -type f -name "$file_glob" -print0 \
        | xargs -0 -n1 -P64 grep -EH "$string_pat" "$@"
}

# Auto complete unset from exported variables
complete -A export unset

# Don't tab-expand hidden files
bind 'set match-hidden-files off' >& /dev/null

# vim:set et sts=4 sw=4 ft=sh:
