# Matthew Wang's Bash Profile for Y!
#
# Suggestion: ln -sf .bashrc .bash_profile
#

# Source global definitions
[[ -f /etc/profile ]] && . /etc/profile
[[ -f /etc/bashrc ]] && . /etc/bashrc
[[ -f ~/DIRS ]] && . ~/DIRS

# Customized PATH
#
function pathmunge() {
    local x
    for x in "$@"; do
        echo $PATH | grep -Eq "(^|:)$x($|:)" || PATH=$x:$PATH
    done
}
pathmunge ~/bin /usr/local/bin /home/y/bin64 /home/y/bin /usr/bin /bin \
          /usr/local/sbin /usr/sbin /sbin
unset pathmunge
export PATH

# Java and maven exports
[[ -d /home/y/libexec/java ]] && \
    export JAVA_HOME=/home/y/libexec/java
[[ -d /home/y/libexec/maven ]] && \
    export M2_HOME=/home/y/libexec/maven
export MAVEN_OPTS="-Xmx1024m"

# Tip: start a global ssh-agent for yourself in /etc/rc.d/rc.local like this:
#   U=wangyl
#   rm -f /home/$U/.ssh-agent.sock
#   /bin/su -m $U -c "/usr/bin/ssh-agent -s -a /home/$U/.ssh-agent.sock \
#      | sed '/^echo/d' > /home/$U/.ssh-agent.rc"
# You will need to ssh-add your identity manually once
#
if [[ -f ~/.ssh-agent.rc ]]; then
    # I am on my own machine, set initial PS1 to ansi hi and ul (default to
    # black) and try load ssh-agent related environments
    #
    PS1='\[\e[1;4m\]' # ansi hi & ul

    . ~/.ssh-agent.rc
    if [[ -d /proc/${SSH_AGENT_PID:-0} ]]; then
        if ! ssh-add -l >& /dev/null; then
            echo -e "\e[1;31mWarning: No key is being held by ssh-agent," \
                    "try 'ssh-add <your-ssh-private-key>'\e[0m" >&2
        fi
    else
        echo -e "\e[1;31mWarning: Global ssh-agent is not alive," \
                "please review /etc/rc.d/rc.local\e[0m" >&2
    fi
else
    # Otherwise assume I am on other's box, highlight PS1 in red as well
    PS1='\[\e[1;4;31m\]'  # ansi hi, ui and red
fi

# Fancy PS1, prompt current yroot, also prompt the '$' in red when we have
# background jobs, '\[' and '\]' is to mark ansi colors to allow shell to
# calculate prompt string length correctly
#
PS1="$PS1"'$(_H=${HOSTNAME%.yahoo.*}; echo ${_H%.peking.corp})' # short hostname
PS1="$PS1"'\[\e[32m\]'                                          # green
PS1="$PS1"'$([[ -z $YROOT_NAME ]] || echo "{$YROOT_NAME}")'     # {yroot}
PS1="$PS1"'\[\e[0;1;4m\]'                                       # reset color
PS1="$PS1"':\w '                                                # cwd, new line
PS1="$PS1"'\[$([[ -z $(jobs) ]] || echo -e "\e[7;31m")\]'       # reverse jobs
PS1="$PS1"'\$\[\e[0m\] '                                        # $, end color
export PS1


########################################################################
#
#           Shortcuts (Aliases, function, auto completion etc.)
#
########################################################################

if which vim >& /dev/null; then
    alias vi='vim -Xn'
    export EDITOR=vim
else
    export EDITOR=vi
fi

export GREP_OPTIONS="--color=auto"

if [[ $(uname -s) == Linux ]]; then
    alias ls='/bin/ls -F --color=auto'
    alias l='/bin/ls -lF --color=auto'
    alias lsps='ps -ef f | grep -vw grep | grep -i'
else
    alias ls='/bin/ls -F'
    alias l='/bin/ls -lF'
    alias lsps='ps -auf | grep -vw grep | grep -i'
fi

# Find a File by pattern
function f() {
    local pat=${1?'Usage: f pattern [path...]'}
    shift
    find $@ -regex '.*\.\(idea\|svn\).*' \
        -prune -o -print | grep -i "$pat"
}

# Load file list generated by function f() above in vim, you can type 'gf' to
# jump to the file
#
function vif() {
    local tmpf=$(mktemp)
    f "$@" > $tmpf && vi -c "/$1" $tmpf && rm -f $tmpf
}

# Grep a string in currently dir by file pattern quickly
function g() {
    file_pat=$1
    string_pat=${2:?"Usage: g 'file-pattern' 'string-pattern' [grep options]"}
    shift 2
    find . -type f -name "$file_pat" -print0 \
        | xargs -0 -n1 -P0 grep -H "$string_pat" "$@"
}

# Auto complete hostnames for hostname related commands, note 'complete -A
# hostname' also works but it does not recognize new $HOSTFILE
#
function _host_complete()
{
    local cur=${COMP_WORDS[COMP_CWORD]}
    COMPREPLY=($(compgen -W "$(awk '!/^#/{print $1}' ~/HOSTS)" -- $cur))
}
complete -F _host_complete ssh scp igor pogo host nc ping mssh scp-profile.sh

# Auto complete unset from exported variables
complete -A export unset

# Yroot name auto completion
function _yroot_complete ()
{
    local cur=${COMP_WORDS[COMP_CWORD]};
    local -a yroots=(
        $(cd /home/y/var/yroots && /bin/ls *.conf | sed 's/\.conf$//g')
    )
    COMPREPLY=($(compgen -W '${yroots[@]}' -- $cur ))
}
complete -F _yroot_complete yroot

# vim:set et sts=4 sw=4 ft=sh:
